// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// i want my user to have name username email token and can add friends block freinds delete friends and this user have a level and status onilne or offline
model User {
  id        String      @id @default(uuid())
  // name      String
  username  String?   @unique
  email     String?   @unique
  token     String?   @unique
  twofasecret String? @unique
  twofatoken String?
  profileImage String?
  twofa       Boolean? @default(false)
  stats     Stats[]  @relation("stats")
  status    UserStatus?
  achievements Achievements[] @relation("achievements")
  matchhistory MatchHistory[] @relation("matchhistory")
  friends   User [] @relation("friends")
  friendsby       User[] @relation("friends")
  blocked      User[]   @relation("block")
  blockedby      User[]   @relation("block")
  friendreqsent   Friendrequest[]   @relation("friendreqsent")
  friendreqreceived   Friendrequest[]   @relation("friendreqreceived")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Friendrequest{
  id        Int     @id @default(autoincrement())
  sender    User        @relation("friendreqsent", fields: [senderId], references: [id])
  senderId  String
  receiver  User        @relation("friendreqreceived", fields: [receiverId], references: [id])
  receiverId  String
  status    Status     @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum  Status {
  ACCEPTED
  PENDING
  DECLINED
}

enum  UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
} 
model Stats{
  level    Int  @default(0)
  user     User     @relation("stats", fields: [userId], references: [id])
  userId   String     
  wins     Int  @default(0)
  loses    Int  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}


model Achievements{
  name      String
  achievementType    Type
  user      User     @relation("achievements", fields: [userId], references: [id])
  userId    String     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, achievementType])
}

enum Type {
  ADDFRIEND
  FIRSTWIN
  FIRSTLOSE
  FIRSTMATCH
  STRIKES
  LEVEL1
  LEVEL5
  LEVEL10
}

model MatchHistory {
  numberOfMatches        Int      @default(0)
  user      User     @relation("matchhistory", fields: [userId], references: [id])
  userId    String     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}